Change and release log
======================

0.8.1
-----

New features

* simulation config parameters now reach the tools

* config file can specify explicit IP address and ports for the 
  simulator instance in exec_sim_timed, and expected tools in the
  flow receive the appropriate updates
  (towards solving #14 but not complete due to .arena files)

* extra command-line arg, `--ignore-precheck`, which allows the 
  deployment validation stage result to be ignored. The code is now
  run in both dry-run and standard runs, but this flag allows the checks to
  be disregarded, in case the check is too strict.

Issues resolved

* paths in `exec_sim_timed` can include a ~. (closes #31)
* terminal/console is useable after `exec_*_timed` (closes #35, independently
  of assisipy#49)
* in log collection of `exec_sim_timed`, large numbers of files were causing 
  a non-responsive hanging program but this is now resolved. (closes #34)
* arenas/transforms library no longer depends on matplotlib. Functions 
  moved to arena/rendering.  No internal dependencies/changes found, so 
  no need to bump major version.
* `exec_*_timed` more gracefully handle a poorly-defined deployment 
  specification, including the .assisi, .dep files being unreadable, and 
  also dep dir nonexistent (closes #29)


0.8.0
-----

New features
* included new graph tool 
  as user script that draws a physical layout, combining .arena and .nbg
  information
  (closes #18)

* graph generated by this tool is now annotated with project file name,
  and time of the test.
  (closes #25)  

* included option to annotate the physically-layed out graphs with 
  hostnames.
  (closes #22)

* all tools now include the tool_version property in their argparse
  handler, giving --version option and message in the -h description

* exec_sim_timed writes out logs of stdout & stderr for each tool launched
  (closes #21)

* work in progress: a `dry-run` mode in `exec_*_timed` that inspects various
  parts of config, including whether all tools are accessible on path.  
  (see issue #8)

Issues resolved

* message/deployment validation tool now handles layered graphs
  (closes #20)
* exec tools now handle empty agents field
  (closes #17)
* test_conn script has a manually-settable runtime and a choice to
  generate simulator commands where appropriate
  (closes #19)
* improved synchronisation in test_conn: it generates commands to 
  launch the `assisirun` stage at a "round" time in future, so that 
  the synch period is all available for beaglebones to start code
  (closes #26)
  



0.7.2
-----

New features

* deployment sandbox is archived (optionally)
* validation for input files specified begun
  (this is a component of a dry-run but not done in the same way)
* arguments can be passed to the simulator and to spawn stages

Issues resolved

* graphs generated with positions can handle multi-layer graphs
  (i.e. those with subgraphs, and links specified explicitly between 
  subgraph1/nodenameA -> subgraph2/nodenameB)




0.7.1
-----

Issues resolved

* #12: missing class function implemented


0.7.0
-----

New implementations

* added a graph class (and tool) that combines topological and geometric info
  (from nbg and arena files) to produce a new output graph.  The class is 
  extensible and can be used in validation procedures, such as to annotate 
  edges that have had successful message transmissions detected.  Some are 
  provided in the `assisipy_utils.validate` module.

* added validator of a deployment specification: this tool generates a new 
  deployment based on an existing deployment spec, that performs simple 
  flashing and messaging tests on the deployment targets, and by means of 
  logfiles it also validates the success or failure of each individual test.

* added `assisi_stop_all`, a script to call casu.stop() on all casus in a 
  deployment. (including with --layer restrictions if desired).  A simple way
  to clean up after an experiment, if for any reason it did not complete 
  gracefully.  


Issues resolved

* #9 fixed: enhanced information relating to experiment runtime
* #7 fixed: multiple arenas automatically receive unique names, even if no
  label is supplied by user (provided generated in the same python instance)
* #11 fixed: automatic parsing of agent specification file types
* #10 fixed: prevent overwriting of log files (unless explicitly requested)

0.6.0
-----

* exec_sim_timed.py sim manager improvments:

  * archiving source or config files
  * directory creation is now logged
  
* mgmt/specs:

  * implemented a yaml-based agent handler data reader and writer (with 
    the same interface as the csv-based version, but files are more readable
    and also extensible in the case that more information is required by 
    alternative processes)  

  * added `exec_phys_timed`, a script that manages physical-only experiments.
    These are far simpler than a simulated run, since no agents/walls/simulator
    are spawned. It handles the deployment toolsuite, archiving of results, and
    experiment length. It is installed as a script.

  * added `cmdlog.sh`, a simple script to strip off meta-info on command logs,
    to ease re-running of an experiment from the log

  * added `reset_popln` to facilitate moving all agents back to their
    originally-specified positions. This is useful in interactive modelling
    (casus, or agents, or both)

* arena:

  * implemented RoundedRectArena, similar to the stadium but more general since
    there can be a flat section on the L/R walls as well as the T/B walls if
    desired
  * included simple rendering helpers for drawing components in `matplotlib`
    (as opposed to spawning in the playground)

Known issues:

* if a key is undefined in the yaml specwriter, it is written (& read) as the 
  string 'null', and not as a None.  Strip out any invalid key/value pairs at 
  generation time; consider whether defaults at read time are wise.


0.5.0
-----

* run_multiagent agent handler improvements:
   
    * agent handler execution script permits single or multiple specification
      files
    * minor improvements to output formatting

* exec_sim_timed.py sim manager improvments:

    * allows external definition of spawning area, enabling one wall spawner to
      serve multiple populations if required. 
    * better skipping of stages that are detected not to have sufficient info
      to proceed 
    * additional stage to separate init_agents from run_agents
    * process ID management improved
    * improved coloring of log entries to screen

* tools have git-derived sub-version when in development mode (better
  traceability); this falls back to the package version with regular install.


0.4.0
-----

* added simulation execution manager, with facility for:

    * spawning of agents and arena walls, by population
    * execution of agent behaviours with utils.run_multiagent
    * execution of CASU controllers with assisipy.deploy tools  
    * collection of results 
    * timed execution, with early interrupt via ctrl-c.
    * logging of commandes

* added example usage simulation execution manager

* added example of heterogeneous behavioural controllers

known issues:

* exec_sim_timed.py:

    * exit codes are not processed (success of various operations 
      cannot be known since assisipy does not acknowledge, e.g. 
      spawn of objects)
    * non-local paths are not universally handled well
    * config files for agent behaviour are not optional.
    * planned feature: easily skip stages via config -- e.g. via
      setting to None or undefined on tools, or declaring the stages
      explicitly
    * planned feature: dry-run, which checks that all files indicated 
      are present, and permissions for relevant logpaths are allowed


0.3.0
-----

* changed name of library (assisilib -> assisipy_utils)
* updated examples in line with library name & tested

0.2.0
-----

* spawning and launching of multiple bees / controller programs
* example usage for management of simulating multiple agents

0.1.1
-----

* included usage examples

0.1.0
-----

* initial release, including arena generators and geometric transformations



